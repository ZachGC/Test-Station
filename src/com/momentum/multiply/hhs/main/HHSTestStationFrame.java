/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.momentum.multiply.hhs.main;

import com.momentum.multiply.SQL.DBAccess;
import com.momentum.multiply.hhs.post.ClientMeasurementGeneration;
import com.momentum.multiply.misc.*;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.*;
import java.sql.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.event.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import org.netbeans.lib.awtextra.AbsoluteConstraints;

/**
 *
 * @author zachristophers
 */
public class HHSTestStationFrame extends javax.swing.JFrame {

    private ApplicationMainFrame amf;
    private String as400UN, as400PW, coreUN, corePW;
    private DBAccess as400 = null, core = null, test = null;
    private int total;

    public String getAs400UN() {
        return as400UN;
    }

    public void setAs400UN(String as400UN) {
        this.as400UN = as400UN;
    }

    public String getAs400PW() {
        return as400PW;
    }

    public void setAs400PW(String as400PW) {
        this.as400PW = as400PW;
    }

    public String getCoreUN() {
        return coreUN;
    }

    public void setCoreUN(String coreUN) {
        this.coreUN = coreUN;
    }

    public String getCorePW() {
        return corePW;
    }

    public void setCorePW(String corePW) {
        this.corePW = corePW;
    }

    public HHSTestStationFrame(ApplicationMainFrame amf) {
        initComponents();
        this.amf = amf;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        DocumentListener dl = new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent de) {
                checkTxtFields();
            }

            @Override
            public void removeUpdate(DocumentEvent de) {
                checkTxtFields();
            }

            @Override
            public void changedUpdate(DocumentEvent de) {
                checkTxtFields();
            }
        };

        scroller = new javax.swing.JScrollPane();
        tblResults = new javax.swing.JTable();
        txtNumGreen = new javax.swing.JTextField();
        txtNumAmber = new javax.swing.JTextField();
        txtNumRed = new javax.swing.JTextField();
        lblGreen = new javax.swing.JLabel();
        lblAmber = new javax.swing.JLabel();
        lblRed = new javax.swing.JLabel();
        lblHeader = new javax.swing.JLabel();
        lblProgress = new javax.swing.JLabel("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        btnGenerate = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("HHS Test Station");
        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        setMaximizedBounds(new java.awt.Rectangle(0, 0, 900, 600));
        setPreferredSize(new java.awt.Dimension(900, 650));
        setResizable(false);
        setSize(new java.awt.Dimension(900, 650));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                amf.setVisible(true);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException ex) {
                    Logger.getLogger(HHSTestStationFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        getContentPane().add(progressBar, new AbsoluteConstraints(200, 300, 500, 20));

        lblProgress.setText("Start");
        getContentPane().add(lblProgress, new AbsoluteConstraints(200, 250, 500, 20));

        scroller.setViewportView(tblResults);

        txtNumGreen.setText("");
        txtNumGreen.setEditable(true);
        txtNumGreen.getDocument().addDocumentListener(dl);
        getContentPane().add(txtNumGreen, new AbsoluteConstraints(225, 100, 75, 25));

        txtNumAmber.setText("");
        txtNumAmber.setEditable(true);
        txtNumAmber.getDocument().addDocumentListener(dl);
        getContentPane().add(txtNumAmber, new AbsoluteConstraints(450, 100, 75, 25));

        txtNumRed.setText("");
        txtNumRed.setEditable(true);
        txtNumRed.getDocument().addDocumentListener(dl);
        getContentPane().add(txtNumRed, new AbsoluteConstraints(675, 100, 75, 25));

        lblGreen.setText("Green Clients:");
        getContentPane().add(lblGreen, new AbsoluteConstraints(100, 100, 100, 25));

        lblAmber.setText("Amber Clients:");
        getContentPane().add(lblAmber, new AbsoluteConstraints(325, 100, 100, 25));

        lblRed.setText("Red Clients:");
        getContentPane().add(lblRed, new AbsoluteConstraints(550, 100, 100, 25));

        lblHeader.setText("Insert the number of:");
        getContentPane().add(lblHeader, new AbsoluteConstraints(350, 50, 200, 25));

        btnGenerate.setText("Generate");
        btnGenerate.setEnabled(false);
        btnGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    btnGenerateActionPerformed(evt);
                } catch (InterruptedException ex) {
                    Logger.getLogger(HHSTestStationFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        getContentPane().add(btnGenerate, new AbsoluteConstraints(700, 550, 100, 30));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>                        

    private void btnGenerateActionPerformed(java.awt.event.ActionEvent evt) throws InterruptedException {
        int counter = 0;
        do {
            as400 = connect("AS400");
            counter++;
        } while (!as400.connectionSuccessful() && counter < 3);
        if (counter < 5) {
            counter = 0;
        }
        do {
            core = connect("CORE");
            counter++;
        } while (!core.connectionSuccessful() && counter < 3);
        if (counter < 5) {
            counter = 0;
        }
        do {
            test = connect("TEST");
            counter++;
        } while (!test.connectionSuccessful() && counter < 3);

        if (counter != 5) {
            generate();
        } else {
            System.out.println("Problem at connection terminals");
        }
    }

    private DBAccess connect(String db) {
        DBAccess temp = null;

        if (db == "CORE") {
            temp = new DBAccess("com.ibm.db2.jcc.DB2Driver", "jdbc:db2://EDB2DEV3:60022/MMULTDCS", "mmultrd", "Mmu1tRd@");
        } else if (db == "AS400") {
            temp = new DBAccess("com.ibm.as400.access.AS400JDBCDriver", "jdbc:as400://isd.momentum.co.za:1433/lpprdlib", as400UN, as400UN);
        } else if (db == "TEST") {
            temp = new DBAccess("com.microsoft.sqlserver.jdbc.SQLServerDriver", "jdbc:sqlserver://mmdkfvuhtdev01\\MSSQLSERVER:1433;databaseName=TEST_HHS_REPOSITORY", "sa", "Admin01+");
        }

        return temp;
    }

    private void generate() throws InterruptedException {
        try {
            txtNumAmber.setEditable(false);
            txtNumGreen.setEditable(false);
            txtNumRed.setEditable(false);

            int greens = Integer.parseInt(txtNumGreen.getText());
            int ambers = Integer.parseInt(txtNumAmber.getText());
            int reds = Integer.parseInt(txtNumRed.getText());
            total = greens + reds + ambers;

            ResultSet rs = as400.executeQuery("SELECT DISTINCT CRPOLA, CRPOLN, CRCNBR, CRRTYP, CCIDNR, CCDTOB, CCSEXC, CCFNAM, CCSNAM, CONMLPCSTA \n"
                    + "FROM BBLIB.CMSROLEPF A  \n"
                    + "LEFT JOIN LPCPCONMLA D ON D.CONMLPNOAL = A.CRPOLA AND D.CONMLPNUMB = A.CRPOLN\n"
                    + "LEFT JOIN BBLIB.CMSCLNTPF B ON B.CCCNBR = A.CRCNBR\n"
                    + "WHERE crpola in ('MM')\n"
                    + "AND CRRTYP IN ('POLHOLD','PARTNER')\n"
                    + "AND CONMLPCSTA = '10INFPPAY' AND CCIDNR IS NOT NULL\n"
                    + "AND CCIDNR > 0\n"
                    + "AND CCFNAM > 'A'\n"
                    + "AND CCSNAM > 'Cupido'\n"
                    + "ORDER BY CCFNAM ASC, CCSNAM ASC");
            System.out.println("ResultSet genereated");

            CalculateScores object = new CalculateScores(this, reds, greens, ambers, rs);
            System.out.println("object processing");
            object.generate();
            System.out.println("object processed");

            PrintWriter pw = new PrintWriter(new File("scores.csv"));
            for (int i = 0; i < total; i++) {
                pw.print(object.getClient(i).getContractNumber() + ","
                        + object.getClient(i).getGender() + ","
                        + object.getClient(i).getAge() + ","
                        + object.getClient(i).getHeight() + ","
                        + object.getClient(i).getWeight() + ","
                        + object.getClient(i).getWaist() + ","
                        + object.getClient(i).getCholestorol() + ","
                        + object.getClient(i).getBps() + ","
                        + object.getClient(i).getBpd() + ","
                        + object.getClient(i).getGlucose() + ","
                        + object.getClient(i).getSmoker() + ","
                        + object.getClient(i).getColour().toString() + "\n");
                this.doWork("Write progress", false, "" + (int) ((i + 1) * 100 / total) + "%", (int) ((i + 1) * 100 / total));
            }
            pw.close();

            System.out.println("Successful write");

            ClientMeasurementGeneration[] cmg = new ClientMeasurementGeneration[total];
            for (int i = 0; i < total; i++) {
                cmg[i] = new ClientMeasurementGeneration();
                cmg[i].setBpd(object.getClient(i).getBpd());
                cmg[i].setBps(object.getClient(i).getBps());
                cmg[i].setChol(object.getClient(i).getCholestorol());
                cmg[i].setGlu_rand(object.getClient(i).getGlucose());
                cmg[i].setHeight(object.getClient(i).getHeight());
                cmg[i].setSmoker(object.getClient(i).getSmoker() > 0);
                cmg[i].setWaist(object.getClient(i).getWaist());
                cmg[i].setWeight(object.getClient(i).getWeight());
                cmg[i].postClientJSON(object.getClient(i).getContractNumber());
                this.doWork("Post progress", false, "" + (int) ((i + 1) * 100 / total) + "%", (int) ((i + 1) * 100 / total));
            }

            try {
                Thread.sleep(30000);
            } catch (InterruptedException ex) {
                Logger.getLogger(HHSTestStationFrame.class.getName()).log(Level.SEVERE, null, ex);
            }

            System.out.println("Client creating");

            OkHttpClient client = new OkHttpClient();

            System.out.println("Client created");
            UUID uuid = UUID.randomUUID();

            Request request = new Request.Builder()
                    .url("http://multiplyaidev.multiply.co.za/healthy-heart-score-batch-rest/rest/HealthyHeartScoreRestService/runHealthyHeartScoreBatch")
                    .get()
                    .addHeader("Cache-Control", "no-cache")
                    .addHeader("Postman-Token", uuid.toString())
                    .build();

            respond(client, request);
            JOptionPane.showMessageDialog(this, "Completed generation successfully.", "Update on progress", JOptionPane.INFORMATION_MESSAGE);
            //compare(object.getClients());
        } catch (SQLException ex) {
            Logger.getLogger(HHSTestStationFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(HHSTestStationFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private int connectionCount = 0;

    private void respond(OkHttpClient client, Request request) throws InterruptedException {
        try {
            Response response = client.newCall(request).execute();
            System.out.println("Successful batch call");
        } catch (Exception e) {
            connectionCount++;
            Thread.sleep(5000);
            if (connectionCount == 5) {
                return;
            }
            System.out.println("Timed out, reconnecting");
            respond(client, request);
        }
    }

    private void compare(Determinant[] clients) {
        try {
            ResultSet rs = core.executeQuery("SELECT CUSTOMER_NUMBER, ENTITY_ID, SCORE_DATE, RUNNING_SCORE_VALUE \n"
                    + "FROM MULTUSR1.FS_SCORE_RUNNING_TOTALS \n"
                    + "GROUP BY CUSTOMER_NUMBER, ENTITY_ID, RUNNING_SCORE_VALUE,SCORE_DATE\n"
                    + "HAVING SCORE_DATE = CURRENT DATE");

            ResultSet comp;

            List<String> entityID = new ArrayList<>();
            List<String> customerNumber = new ArrayList<>();
            List<Integer> score = new ArrayList<>();

            while (rs.next()) {
                entityID.add(rs.getString("ENTITY_ID"));
                customerNumber.add(rs.getString("CUSTOMER_NUMBER"));
                score.add(rs.getInt("RUNNING_SCORE_VALUE"));
            }

            Scanner scFile = new Scanner(new File("scores.csv"));
            String array[];
            DefaultTableModel model = new DefaultTableModel(total, 3);
            String[] cols = {"CONTRACT_NUMBER", "EXPECTED_OUTPUT", "ACTUAL_OUTPUT"};
            model.setColumnIdentifiers(cols);
            String[][] vals = new String[total][3];
            int pos = 0;

            while (scFile.hasNextLine()) {
                array = new String[12];
                Scanner scLine = new Scanner(scFile.nextLine()).useDelimiter(",");
                for (int i = 0; i < 12; i++) {
                    array[i] = "" + scLine.next();
                }
                scLine.close();

                String col;
                if (score.get(customerNumber.indexOf(array[0])) == 0) {
                    col = "GREEN";
                } else if (score.get(customerNumber.indexOf(array[0])) < 5 && score.get(customerNumber.indexOf(array[0])) > 0) {
                    col = "AMBER";
                } else {
                    col = "RED";
                }

                if (!array[11].equalsIgnoreCase(col)) {
                    vals[pos][0] = customerNumber.get(customerNumber.indexOf(array[0]));
                    vals[pos][1] = array[11];
                    vals[pos][2] = col;
                }
            }
            scFile.close();

            tblResults = new JTable(vals, cols);

        } catch (FileNotFoundException ex) {
            Logger.getLogger(HHSTestStationFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(HHSTestStationFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void checkTxtFields() {
        String green = txtNumGreen.getText(), amber = txtNumAmber.getText(), red = txtNumRed.getText();
        if (green.equals("") || amber.equals("") || red.equals("")) {
            btnGenerate.setEnabled(false);
        } else {
            try {
                Integer.parseInt(green);
                Integer.parseInt(amber);
                Integer.parseInt(red);
                btnGenerate.setEnabled(true);
            } catch (NumberFormatException e) {
                btnGenerate.setEnabled(false);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public void setProgress() {

    }

    public void doWork(String taskName, boolean indeterminate, String str, int progress) {

        Worker worker = new Worker();
        worker.addPropertyChangeListener(new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if ("progress".equals(evt.getPropertyName())) {
                    progressBar.setValue((Integer) evt.getNewValue());
                    lblProgress.setText(taskName);
                    progressBar.setIndeterminate(indeterminate);
                    progressBar.setString(str);
                    progressBar.setStringPainted(true);
                }
            }

        });

        worker.execute();

    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton btnGenerate;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel lblGreen;
    private javax.swing.JLabel lblAmber;
    private javax.swing.JLabel lblRed;
    private javax.swing.JLabel lblHeader;
    private javax.swing.JLabel lblProgress;
    private javax.swing.JScrollPane scroller;
    private javax.swing.JTable tblResults;
    private javax.swing.JTextField txtNumGreen;
    private javax.swing.JTextField txtNumAmber;
    private javax.swing.JTextField txtNumRed;
    // End of variables declaration                   
}
